Metadata-Version: 2.1
Name: patlib
Version: 0.3.5
Summary: A collection of tools.
License: MIT
Author: patricknraanes
Author-email: patrick.n.raanes@gmail.com
Requires-Python: >=3.7,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Provides-Extra: misc
Provides-Extra: mydev
Requires-Dist: importlib-metadata (>=1.0,<2.0); python_version < "3.8"
Requires-Dist: ipdb; extra == "mydev"
Requires-Dist: ipython (>=7.20,<8.0); extra == "mydev"
Requires-Dist: line_profiler; extra == "mydev"
Requires-Dist: matplotlib (>=3.2.2,<4.0.0)
Requires-Dist: numpy (>=1.19.5,<2.0.0)
Requires-Dist: pandas; extra == "misc"
Requires-Dist: pre-commit; extra == "mydev"
Requires-Dist: pudb; extra == "mydev"
Requires-Dist: pyqt5 (!=5.15.3); extra == "mydev"
Requires-Dist: pysnooper; extra == "mydev"
Requires-Dist: pytest-clarity; extra == "mydev"
Requires-Dist: pytest-sugar; extra == "mydev"
Requires-Dist: pytest; extra == "mydev"
Requires-Dist: pyyaml; extra == "misc"
Requires-Dist: scipy
Requires-Dist: see; extra == "mydev"
Requires-Dist: tabulate; extra == "misc"
Requires-Dist: toml; extra == "misc"
Requires-Dist: tqdm; extra == "misc"
Description-Content-Type: text/markdown

# patlib

Purposes:

- Share tools across my projects, such as DAPPER.
- Define optional dependencies to setup my dev. environments by
  "inheriting" from here. The aim is that I only need to keep
  pylib up to date (e.g. pinning buggy Jedi or pdbpp),
  rather than the `pyproject.toml` of each and every project.

  ```toml
  [tool.poetry.dev-dependencies]
  # Either:
  patlib = {version = "==0.2.8", extras = ["mydev", "misc"]}
  # Or:
  patlib = {path = "../../py/patlib", extras = ["mydev", "misc"], develop=true}
  ```

  NB: Maybe this is a bad idea; maybe I will forget to include e.g.
  numpy when publishing the other project.

- Provide pylab replacement


Poetry workflow

- Init project
- Abandom project (tmp)
- Resume project
- Publish/realease PyPI/GitHub
- Add dependencies (by poetry or pyproject.toml)
- Update dependencies
- Virtual env management
- Pre-commit, Lint, Test, CI, Docs

